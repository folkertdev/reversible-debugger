module Example exposing (..)

import Expect exposing (Expectation)
import Fuzz exposing (Fuzzer, list, int, string)
import Test exposing (..)
import Json.Decode as Decode exposing (decodeString)
import Types exposing (..)
import Dict exposing (Dict)


decoderTest name decoder string expected =
    test name <|
        \_ ->
            decodeString decoder string
                |> Expect.equal (Ok expected)


program =
    let
        data =
            """[{"tag":"Let","contents":["d",{"tag":"Port"},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"SpawnThread","contents":["Alice",{"tag":"Let","contents":["title",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":42}},{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"title","channelName":"d"},{"tag":"Let","contents":["price",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"share","channelName":"d"},{"tag":"Let","contents":["ok",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Skip"}]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Bob",{"tag":"Let","contents":["ok",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":1}},{"tag":"Let","contents":["address",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":8}},{"tag":"Let","contents":["price",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["share",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["remainder",{"tag":"Procedure","contents":[["x"],{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"address","channelName":"d"},{"tag":"Let","contents":["date",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Skip"}]}]}]},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"ok","channelName":"d"},{"creator":[0],"tag":"Send","payload":"ok","channelName":"d"}]},{"creator":[0],"tag":"Send","payload":"share","channelName":"d"}]},{"creator":[0],"tag":"Send","payload":"remainder","channelName":"d"}]}]}]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Carol",{"tag":"Let","contents":["unit",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":0}},{"tag":"Let","contents":["share",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["remainder",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Apply","contents":["remainder",["unit"]]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Vendor",{"tag":"Let","contents":["price",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":5}},{"tag":"Let","contents":["date",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":0}},{"tag":"Let","contents":["title",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"price","channelName":"d"},{"creator":[0],"tag":"Send","payload":"price","channelName":"d"}]},{"tag":"Let","contents":["ok",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["address",{"creator":[0],"tag":"Receive","channelName":"d"},{"creator":[0],"tag":"Send","payload":"date","channelName":"d"}]}]}]}]}]}]}]}]}]}]
    """
    in
        decoderTest "decoding program" (Decode.list Types.decodeProgram) data <|
            [ Let (Identifier "d") Port (Sequence (Sequence (Sequence (SpawnThread (Just (Identifier "Alice")) (Let (Identifier "title") (VInt (LiteralInt 42)) (Sequence (Send { channelName = Identifier "d", payload = Identifier "title", creator = PID [ 0 ] }) (Let (Identifier "price") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Sequence (Send { channelName = Identifier "d", payload = Identifier "share", creator = PID [ 0 ] }) (Let (Identifier "ok") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) Skip)))))) (SpawnThread (Just (Identifier "Bob")) (Let (Identifier "ok") (VInt (LiteralInt 1)) (Let (Identifier "address") (VInt (LiteralInt 8)) (Let (Identifier "price") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "share") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "remainder") (Procedure ([ Identifier "x" ]) (Sequence (Send { channelName = Identifier "d", payload = Identifier "address", creator = PID [ 0 ] }) (Let (Identifier "date") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) Skip))) (Sequence (Sequence (Sequence (Send { channelName = Identifier "d", payload = Identifier "ok", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "ok", creator = PID [ 0 ] })) (Send { channelName = Identifier "d", payload = Identifier "share", creator = PID [ 0 ] })) (Send { channelName = Identifier "d", payload = Identifier "remainder", creator = PID [ 0 ] }))))))))) (SpawnThread (Just (Identifier "Carol")) (Let (Identifier "unit") (VInt (LiteralInt 0)) (Let (Identifier "share") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "remainder") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Apply (Identifier "remainder") ([ Identifier "unit" ]))))))) (SpawnThread (Just (Identifier "Vendor")) (Let (Identifier "price") (VInt (LiteralInt 5)) (Let (Identifier "date") (VInt (LiteralInt 0)) (Let (Identifier "title") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Sequence (Sequence (Send { channelName = Identifier "d", payload = Identifier "price", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "price", creator = PID [ 0 ] })) (Let (Identifier "ok") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "address") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "date", creator = PID [ 0 ] }))))))))) ]


localTypeAtom : Test
localTypeAtom =
    let
        atom =
            """{"type_":"title","tag":"Send","receiver":"Vendor"}"""

        expected =
            {}
    in
        decoderTest "decoding local type atom"
            (Types.decodeLocalAtom Decode.string)
            atom
            (LocalAtomSend { type_ = "title", receiver = Identifier "Vendor" })


localTypeState : Test
localTypeState =
    let
        data =
            """{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Send","receiver":"Vendor"},[{"type_":"price","tag":"Receive","sender":"Vendor"},{"type_":"share","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"}]]},"participant":"Alice"}"""
    in
        decoderTest "decoding localTypeState" Types.decodeLocalTypeState data <|
            { participant = Identifier "Alice"
            , state =
                Zipper
                    ( []
                    , LocalAtomSend { receiver = Identifier "Vendor", type_ = "title" }
                    , [ LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "share" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" } ]
                    )
            }


localTypeStates =
    let
        data =
            """[["Alice",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Send","receiver":"Vendor"},[{"type_":"      price","tag":"Receive","sender":"Vendor"},{"type_":"share","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"}]]},"participant":"Alice"}],["Bob",{"state":{"tag":"Zipper","contents":[[],{"type_":"price","tag"      :"Receive","sender":"Vendor"},[{"type_":"share","tag":"Receive","sender":"Alice"},{"type_":"OK","tag":"Send","receiver":"Alice"},{"type_":"OK","tag":"Send","receiver":"Vendor"},{"type_":"share","tag":"Send","receiver":"Carol"},{"type_":"thunk","tag":"Send","receiver":"Carol"},{"type_":"address","tag":"Send","receiver":"Vendor"},{"type_":"date","tag":"Receive","sender":"Vendor"}]]},"participant":"Bob"}],["Carol",{"state":{"tag":"Zipper","contents":[[],{"type_":      "share","tag":"Receive","sender":"Bob"},[{"type_":"thunk","tag":"Receive","sender":"Bob"}]]},"participant":"Carol"}],["Vendor",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Receive","sender":"Alice"},[{"type_":"price","tag":"Send","receiver":"Alice"},{"type_":"price","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"},{"type_":"address","tag":"Receive","sender":"Bob"},{"type_":"date","tag":"Send","receiver":"Bob"}]]},      "participant":"Vendor"}]]
        """
    in
        decoderTest "decoding a dict of localTypeState" (Types.tupleDict Types.decodeLocalTypeState) data <|
            Dict.fromList
                [ ( "Alice", { participant = Identifier "Alice", state = Zipper ( [], LocalAtomSend { receiver = Identifier "Vendor", type_ = "title" }, [ LocalAtomReceive { sender = Identifier "Vendor", type_ = "      price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "share" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" } ] ) } )
                , ( "Bob", { participant = Identifier "Bob", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, [ LocalAtomReceive { sender = Identifier "Alice", type_ = "share" }, LocalAtomSend { receiver = Identifier "Alice", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "share" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "thunk" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "address" }, LocalAtomReceive { sender = Identifier "Vendor", type_ = "date" } ] ) } )
                , ( "Carol", { participant = Identifier "Carol", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Bob", type_ = "share" }, [ LocalAtomReceive { sender = Identifier "Bob", type_ = "thunk" } ] ) } )
                , ( "Vendor", { participant = Identifier "Vendor", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Alice", type_ = "title" }, [ LocalAtomSend { receiver = Identifier "Alice", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "price" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "address" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "date" } ] ) } )
                ]


context =
    let
        data =
            """{"channels":[],"bindings":[],"variableCount":0,"threads":[[[0],0]],"participantMap":[],"localTypeStates":[["Alice",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Send","receiver":"Vendor"},[{"type_":"price","tag":"Receive","sender":"Vendor"},{"type_":"share","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"}]]},"participant":"Alice"}],["Bob",{"state":{"tag":"Zipper","contents":[[],{"type_":"price","tag":"Receive","sender":"Vendor"},[{"type_":"share","tag":"Receive","sender":"Alice"},{"type_":"OK","tag":"Send","receiver":"Alice"},{"type_":"OK","tag":"Send","receiver":"Vendor"},{"type_":"share","tag":"Send","receiver":"Carol"},{"type_":"thunk","tag":"Send","receiver":"Carol"},{"type_":"address","tag":"Send","receiver":"Vendor"},{"type_":"date","tag":"Receive","sender":"Vendor"}]]},"participant":"Bob"}],["Carol",{"state":{"tag":"Zipper","contents":[[],{"type_":"share","tag":"Receive","sender":"Bob"},[{"type_":"thunk","tag":"Receive","sender":"Bob"}]]},"participant":"Carol"}],["Vendor",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Receive","sender":"Alice"},[{"type_":"price","tag":"Send","receiver":"Alice"},{"type_":"price","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"},{"type_":"address","tag":"Receive","sender":"Bob"},{"type_":"date","tag":"Send","receiver":"Bob"}]]},"participant":"Vendor"}]]}
        """
    in
        decoderTest "decoding context" Types.decodeContext data <|
            { bindings = Dict.fromList []
            , variableCount = 0
            , channels = Dict.fromList []
            , threads = Dict.fromList [ ( [ 0 ], 0 ) ]
            , participantMap = Dict.fromList []
            , localTypeStates = Dict.fromList [ ( "Alice", { participant = Identifier "Alice", state = Zipper ( [], LocalAtomSend { receiver = Identifier "Vendor", type_ = "title" }, [ LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "share" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" } ] ) } ), ( "Bob", { participant = Identifier "Bob", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, [ LocalAtomReceive { sender = Identifier "Alice", type_ = "share" }, LocalAtomSend { receiver = Identifier "Alice", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "share" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "thunk" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "address" }, LocalAtomReceive { sender = Identifier "Vendor", type_ = "date" } ] ) } ), ( "Carol", { participant = Identifier "Carol", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Bob", type_ = "share" }, [ LocalAtomReceive { sender = Identifier "Bob", type_ = "thunk" } ] ) } ), ( "Vendor", { participant = Identifier "Vendor", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Alice", type_ = "title" }, [ LocalAtomSend { receiver = Identifier "Alice", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "price" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "address" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "date" } ] ) } ) ]
            }


replState =
    let
        data =
            """
{"context":{"channels":[],"bindings":[],"variableCount":0,"threads":[[[0],0]],"participantMap":[],"localTypeStates":[["Alice",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Send","receiver":"Vendor"},[{"type_":"price","tag":"Receive","sender":"Vendor"},{"type_":"share","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"}]]},"participant":"Alice"}],["Bob",{"state":{"tag":"Zipper","contents":[[],{"type_":"price","tag":"Receive","sender":"Vendor"},[{"type_":"share","tag":"Receive","sender":"Alice"},{"type_":"OK","tag":"Send","receiver":"Alice"},{"type_":"OK","tag":"Send","receiver":"Vendor"},{"type_":"share","tag":"Send","receiver":"Carol"},{"type_":"thunk","tag":"Send","receiver":"Carol"},{"type_":"address","tag":"Send","receiver":"Vendor"},{"type_":"date","tag":"Receive","sender":"Vendor"}]]},"participant":"Bob"}],["Carol",{"state":{"tag":"Zipper","contents":[[],{"type_":"share","tag":"Receive","sender":"Bob"},[{"type_":"thunk","tag":"Receive","sender":"Bob"}]]},"participant":"Carol"}],["Vendor",{"state":{"tag":"Zipper","contents":[[],{"type_":"title","tag":"Receive","sender":"Alice"},[{"type_":"price","tag":"Send","receiver":"Alice"},{"type_":"price","tag":"Send","receiver":"Bob"},{"type_":"OK","tag":"Receive","sender":"Bob"},{"type_":"address","tag":"Receive","sender":"Bob"},{"type_":"date","tag":"Send","receiver":"Bob"}]]},"participant":"Vendor"}]]},"threadState":{"tag":"Running","contents":[{"history":[],"program":[{"tag":"Let","contents":["d",{"tag":"Port"},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"SpawnThread","contents":["Alice",{"tag":"Let","contents":["title",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":42}},{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"title","channelName":"d"},{"tag":"Let","contents":["price",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"share","channelName":"d"},{"tag":"Let","contents":["ok",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Skip"}]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Bob",{"tag":"Let","contents":["ok",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":1}},{"tag":"Let","contents":["address",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":8}},{"tag":"Let","contents":["price",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["share",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["remainder",{"tag":"Procedure","contents":[["x"],{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"address","channelName":"d"},{"tag":"Let","contents":["date",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Skip"}]}]}]},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"ok","channelName":"d"},{"creator":[0],"tag":"Send","payload":"ok","channelName":"d"}]},{"creator":[0],"tag":"Send","payload":"share","channelName":"d"}]},{"creator":[0],"tag":"Send","payload":"remainder","channelName":"d"}]}]}]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Carol",{"tag":"Let","contents":["unit",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":0}},{"tag":"Let","contents":["share",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["remainder",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Apply","contents":["remainder",["unit"]]}]}]}]}]}]},{"tag":"SpawnThread","contents":["Vendor",{"tag":"Let","contents":["price",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":5}},{"tag":"Let","contents":["date",{"tag":"VInt","contents":{"tag":"LiteralInt","contents":0}},{"tag":"Let","contents":["title",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Sequence","contents":[{"tag":"Sequence","contents":[{"creator":[0],"tag":"Send","payload":"price","channelName":"d"},{"creator":[0],"tag":"Send","payload":"price","channelName":"d"}]},{"tag":"Let","contents":["ok",{"creator":[0],"tag":"Receive","channelName":"d"},{"tag":"Let","contents":["address",{"creator":[0],"tag":"Receive","channelName":"d"},{"creator":[0],"tag":"Send","payload":"date","channelName":"d"}]}]}]}]}]}]}]}]}]}],"pid":[0]},{"inactive":[],"filtered":[],"active":[],"uninitialized":[],"blocked":[]}]}}
"""
    in
        decoderTest "decoding replState" Types.decodeReplState data <|
            { context =
                { bindings = Dict.fromList []
                , variableCount = 0
                , channels = Dict.fromList []
                , threads = Dict.fromList [ ( [ 0 ], 0 ) ]
                , participantMap = Dict.fromList []
                , localTypeStates = Dict.fromList [ ( "Alice", { participant = Identifier "Alice", state = Zipper ( [], LocalAtomSend { receiver = Identifier "Vendor", type_ = "title" }, [ LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "share" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" } ] ) } ), ( "Bob", { participant = Identifier "Bob", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Vendor", type_ = "price" }, [ LocalAtomReceive { sender = Identifier "Alice", type_ = "share" }, LocalAtomSend { receiver = Identifier "Alice", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "OK" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "share" }, LocalAtomSend { receiver = Identifier "Carol", type_ = "thunk" }, LocalAtomSend { receiver = Identifier "Vendor", type_ = "address" }, LocalAtomReceive { sender = Identifier "Vendor", type_ = "date" } ] ) } ), ( "Carol", { participant = Identifier "Carol", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Bob", type_ = "share" }, [ LocalAtomReceive { sender = Identifier "Bob", type_ = "thunk" } ] ) } ), ( "Vendor", { participant = Identifier "Vendor", state = Zipper ( [], LocalAtomReceive { sender = Identifier "Alice", type_ = "title" }, [ LocalAtomSend { receiver = Identifier "Alice", type_ = "price" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "price" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "OK" }, LocalAtomReceive { sender = Identifier "Bob", type_ = "address" }, LocalAtomSend { receiver = Identifier "Bob", type_ = "date" } ] ) } ) ]
                }
            , threadState = Running { pid = PID [ 0 ], history = [], program = [ Let (Identifier "d") Port (Sequence (Sequence (Sequence (SpawnThread (Just (Identifier "Alice")) (Let (Identifier "title") (VInt (LiteralInt 42)) (Sequence (Send { channelName = Identifier "d", payload = Identifier "title", creator = PID [ 0 ] }) (Let (Identifier "price") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Sequence (Send { channelName = Identifier "d", payload = Identifier "share", creator = PID [ 0 ] }) (Let (Identifier "ok") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) Skip)))))) (SpawnThread (Just (Identifier "Bob")) (Let (Identifier "ok") (VInt (LiteralInt 1)) (Let (Identifier "address") (VInt (LiteralInt 8)) (Let (Identifier "price") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "share") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "remainder") (Procedure ([ Identifier "x" ]) (Sequence (Send { channelName = Identifier "d", payload = Identifier "address", creator = PID [ 0 ] }) (Let (Identifier "date") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) Skip))) (Sequence (Sequence (Sequence (Send { channelName = Identifier "d", payload = Identifier "ok", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "ok", creator = PID [ 0 ] })) (Send { channelName = Identifier "d", payload = Identifier "share", creator = PID [ 0 ] })) (Send { channelName = Identifier "d", payload = Identifier "remainder", creator = PID [ 0 ] }))))))))) (SpawnThread (Just (Identifier "Carol")) (Let (Identifier "unit") (VInt (LiteralInt 0)) (Let (Identifier "share") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "remainder") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Apply (Identifier "remainder") ([ Identifier "unit" ]))))))) (SpawnThread (Just (Identifier "Vendor")) (Let (Identifier "price") (VInt (LiteralInt 5)) (Let (Identifier "date") (VInt (LiteralInt 0)) (Let (Identifier "title") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Sequence (Sequence (Send { channelName = Identifier "d", payload = Identifier "price", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "price", creator = PID [ 0 ] })) (Let (Identifier "ok") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Let (Identifier "address") (Receive { channelName = Identifier "d", creator = PID [ 0 ] }) (Send { channelName = Identifier "d", payload = Identifier "date", creator = PID [ 0 ] }))))))))) ] } { active = Dict.fromList [], inactive = Dict.fromList [], blocked = Dict.fromList [], filtered = Dict.fromList [], uninitialized = Dict.fromList [] }
            }
